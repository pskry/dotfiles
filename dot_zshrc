#!/usr/bin/env zsh

() {

# xdg standard ============================================================= {{{

    export XDG_CONFIG_HOME=~/.config
    export XDG_DATA_HOME=~/.local/share
    export XDG_STATE_HOME=~/.local/state
    export XDG_CACHE_HOME=~/.cache

# xdg standard ============================================================= }}}

# history ================================================================== {{{

    # Enable additional glob operators. (Globbing = pattern matching)
    # https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation
    setopt EXTENDED_GLOB

    # Tell zsh where to store history.
    HISTFILE=$XDG_DATA_HOME/zsh/history

    # Just in case: If the parent directory doesn't exist, create it.
    [[ -d $HISTFILE:h ]] ||
        mkdir -p $HISTFILE:h

    # Max number of entries to keep in history file.
    SAVEHIST=100000

    # Max number of history entries to keep in memory.
    HISTSIZE=$(( 1.2 * SAVEHIST ))

    # Use modern file-locking mechanisms, for better safety & performance.
    setopt HIST_FCNTL_LOCK

    # Keep only the most recent copy of each duplicate entry in history.
    setopt HIST_IGNORE_ALL_DUPS

    # Auto-sync history between concurrent sessions.
    setopt SHARE_HISTORY

# history ================================================================== }}}

# directories ============================================================== {{{

    # `hash -d <name>=<path>` makes ~<name> a shortcut for <path>.
    hash -d dev=$HOME/dev

# directories ============================================================== }}}

# env ====================================================================== {{{

    # -U ensures each entry in these is unique (that is, discards duplicates).
    export -U PATH path FPATH fpath MANPATH manpath
    export -UT INFOPATH infopath  # -T creates a "tied" pair; see below.

    # $PATH and $path (and also $FPATH and $fpath, etc.) are "tied" to each
    # other. Modifying one will also modify the other.
    # Note that each value in an array is expanded separately. Thus, we can
    # use ~ for $HOME in each $path entry.
    path=(
        /home/linuxbrew/.linuxbrew/bin(N)   # (N): null if file doesn't exist
        /opt/homebrew/bin(N)                # (N): null if file doesn't exist
        $path
        ~/.local/bin
        ~/bin
    )

    # Add your functions to your $fpath, so you can autoload them.
    fpath=(
        $ZDOTDIR/functions
        $fpath
        ~/.local/share/zsh/site-functions
    )

    if command -v brew > /dev/null; then
        eval "$(brew shellenv)"

      # Add dirs containing completion functions to your $fpath and they will be
      # picked up automatically when the completion system is initialized.
      # Here, we add it to the end of $fpath, so that we use brew's completions
      # only for those commands that zsh doesn't already know how to complete.
      fpath+=(
          $HOMEBREW_PREFIX/share/zsh/site-functions
      )
    fi

# env ================================================================== }}}

# various opts ============================================================= {{{

    # Don't let > silently overwrite files. To overwrite, use >! instead.
    setopt NO_CLOBBER

    # Treat comments pasted into the command line as comments, not code.
    setopt INTERACTIVE_COMMENTS

    # Don't treat non-executable files in your $path as commands.
    # This makes sure they don't show up as command completions.
    # Settinig this option can impact performance on older systems,
    # but should not be a problem on modern ones.
    setopt HASH_EXECUTABLES_ONLY

    # Enable ** and *** as shortcuts for **/* and ***/*, respectively.
    # https://zsh.sourceforge.io/Doc/Release/Expansion.html#Recursive-Globbing
    setopt GLOB_STAR_SHORT

    # Sort numbers numerically, not lexicographically.
    setopt NUMERIC_GLOB_SORT

# various opts ============================================================= }}}

# key bindings ============================================================= {{{

    # Enable the use of Ctrl-Q and Ctrl-S for keyboard shortcuts.
    unsetopt FLOW_CONTROL

    # Alt-Q
    # - On the main prompt: Push aside your current command line, so you can
    #   type a new one. The old command line is re-inserted when you press
    #   Alt-G or automatically on the next command line.
    # - On the continuation prompt: Move all entered lines to the main prompt,
    #   so you can edit the previous lines.
    bindkey '^[q' push-line-or-edit

    # Alt-H: Get help on your current command.
    () {
      unalias $1 2> /dev/null   # Remove the default.

      # Load the more advanced version.
      # -R resolves the function immediately, so we can access the source dir.
      autoload -RUz $1

      # Load $functions_source, an associative array (a.k.a. dictionary, hash
      # table or map) that maps each function to its source file.
      zmodload -F zsh/parameter p:functions_source

      # Lazy-load all the run-help-* helper functions from the same dir.
      autoload -Uz $functions_source[$1]-*~*.zwc  # Exclude .zwc files.
    } run-help

    # Alt-V: Show the next key combo's terminal code and state what it does.
    bindkey '^[v' describe-key-briefly

    # Alt-W: Type a widget name and press Enter to see the keys bound to it.
    # Type part of a widget name and press Enter for autocompletion.
    bindkey '^[w' where-is

    # Alt-Shift-S: Prefix the current or previous command line with `sudo`.
    () {
      bindkey '^[S' $1  # Bind Alt-Shift-S to the widget below.
      zle -N $1         # Create a widget that calls the function below.
      $1() {            # Create the function.
        # If the command line is empty or just whitespace, then first load the
        # previous line.
        [[ $BUFFER == [[:space:]]# ]] &&
            zle .up-history

        # $LBUFFER is the part of the command line that's left of the cursor.
        # This way, we preserve the cursor's position.
        LBUFFER="sudo $LBUFFER"
      }
    } .sudo

    # Vim mode
    bindkey -v
    export KEYTIMEOUT=1 # accept keys like <Esc> immediately
        # Restore history search
        bindkey '^R' history-incremental-search-backward

# key bindings ============================================================= }}}

# commands, functions and aliases ========================================== {{{

    # Type '-' to return to your previous dir.
    alias -- -='cd -'
    # '--' signifies the end of options. Otherwise, '-=...' would be interpreted as
    # a flag.

    # These aliases enable us to paste example code into the terminal without the
    # shell complaining about the pasted prompt symbol.
    alias %= \$=

    # zmv lets you batch rename (or copy or link) files by using pattern matching.
    # https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-zmv
    autoload -Uz zmv
    alias zmv='zmv -Mv'
    alias zcp='zmv -Cv'
    alias zln='zmv -Lv'
    # Note that, unlike with Bash, you do not need to inform Zsh's completion system
    # of your aliases. It will figure them out automatically.

    # Set $PAGER if it hasn't been set yet. We need it below.
    # `:` is a builtin command that does nothing. We use it here to stop Zsh from
    # evaluating the value of our $expansion as a command.
    : ${PAGER:=less}

    # Associate file name .extensions with programs to open them.
    # This lets you open a file just by typing its name and pressing enter.
    # Note that the dot is implicit; `gz` below stands for files ending in .gz
    alias -s {css,gradle,html,js,json,md,patch,properties,txt,xml,yml}=$PAGER
    alias -s gz='gzip -l'
    alias -s {log,out}='tail -F'

    alias mkdir='mkdir -p'

    alias ls='exa --group-directories-first --git --icons --color=auto'
    alias l='ls -l'
    alias ll='ls -la'

    alias cat='bat'

    alias df='df -h'

# Use `< file` to quickly view the contents of any text file.
READNULLCMD=$PAGER  # Set the program to use for this.

# commands, functions and aliases ========================================== }}}

    # Start Keychain
    eval "$(keychain --quiet --eval --agents ssh psr_ed25519 pskry_ed25519)"

    # Start Starship
    eval "$(starship init zsh)"

    export SDKMAN_DIR=$(brew --prefix sdkman-cli)/libexec
    if [[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]]; then
        source "${SDKMAN_DIR}/bin/sdkman-init.sh"
    fi

    . "$HOME/.cargo/env"

} "$@"

# vim:sw=4:sw=4:fdm=marker:fenc=utf-8:ft=zsh
